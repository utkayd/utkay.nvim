{
  "Console log": {
    "prefix": "cl",
    "body": ["console.log($1);"],
    "description": "Console log"
  },
  "Console log with label": {
    "prefix": "cll",
    "body": ["console.log('${1:label}:', $2);"],
    "description": "Console log with label"
  },
  "Console error": {
    "prefix": "ce",
    "body": ["console.error($1);"],
    "description": "Console error"
  },
  "Console warn": {
    "prefix": "cw",
    "body": ["console.warn($1);"],
    "description": "Console warn"
  },
  "Console table": {
    "prefix": "ct",
    "body": ["console.table($1);"],
    "description": "Console table"
  },

  "Arrow Function": {
    "prefix": "af",
    "body": ["const ${1:name} = ($2) => {", "  $3", "};"],
    "description": "Arrow function"
  },
  "Async Arrow Function": {
    "prefix": "aaf",
    "body": ["const ${1:name} = async ($2) => {", "  $3", "};"],
    "description": "Async arrow function"
  },
  "Function": {
    "prefix": "fn",
    "body": ["function ${1:name}($2) {", "  $3", "}"],
    "description": "Named function"
  },
  "Async Function": {
    "prefix": "afn",
    "body": ["async function ${1:name}($2) {", "  $3", "}"],
    "description": "Async named function"
  },

  "Class": {
    "prefix": "cls",
    "body": [
      "class ${1:Name} {",
      "  constructor($2) {",
      "    $3",
      "  }",
      "",
      "  $4",
      "}"
    ],
    "description": "Class with constructor"
  },
  "Class with extends": {
    "prefix": "clse",
    "body": [
      "class ${1:Name} extends ${2:Parent} {",
      "  constructor($3) {",
      "    super($4);",
      "    $5",
      "  }",
      "",
      "  $6",
      "}"
    ],
    "description": "Class extending parent"
  },

  "Try Catch": {
    "prefix": "tryc",
    "body": ["try {", "  $1", "} catch (${2:error}) {", "  console.error($2);", "  $3", "}"],
    "description": "Try-catch block"
  },

  "For Loop": {
    "prefix": "for",
    "body": ["for (let ${1:i} = 0; $1 < ${2:array}.length; $1++) {", "  $3", "}"],
    "description": "For loop"
  },
  "For Of": {
    "prefix": "fof",
    "body": ["for (const ${1:item} of ${2:array}) {", "  $3", "}"],
    "description": "For...of loop"
  },
  "For In": {
    "prefix": "fin",
    "body": ["for (const ${1:key} in ${2:object}) {", "  $3", "}"],
    "description": "For...in loop"
  },
  "ForEach": {
    "prefix": "fe",
    "body": ["${1:array}.forEach((${2:item}) => {", "  $3", "});"],
    "description": "Array forEach"
  },

  "Map": {
    "prefix": "map",
    "body": ["${1:array}.map((${2:item}) => {", "  return $3;", "})"],
    "description": "Array map"
  },
  "Filter": {
    "prefix": "filter",
    "body": ["${1:array}.filter((${2:item}) => ${3:condition})"],
    "description": "Array filter"
  },
  "Reduce": {
    "prefix": "reduce",
    "body": ["${1:array}.reduce((${2:acc}, ${3:item}) => {", "  return $4;", "}, ${5:initial})"],
    "description": "Array reduce"
  },

  "Import": {
    "prefix": "imp",
    "body": ["import { $2 } from '$1';"],
    "description": "Import statement"
  },
  "Import Default": {
    "prefix": "impd",
    "body": ["import $2 from '$1';"],
    "description": "Import default"
  },
  "Export": {
    "prefix": "exp",
    "body": ["export { $1 };"],
    "description": "Export statement"
  },
  "Export Default": {
    "prefix": "expd",
    "body": ["export default $1;"],
    "description": "Export default"
  },

  "Promise": {
    "prefix": "prom",
    "body": ["new Promise((resolve, reject) => {", "  $1", "})"],
    "description": "Promise"
  },
  "Async Await": {
    "prefix": "aw",
    "body": ["const ${1:result} = await ${2:promise};"],
    "description": "Await"
  },

  "If Statement": {
    "prefix": "if",
    "body": ["if (${1:condition}) {", "  $2", "}"],
    "description": "If statement"
  },
  "If Else": {
    "prefix": "ife",
    "body": ["if (${1:condition}) {", "  $2", "} else {", "  $3", "}"],
    "description": "If-else statement"
  },

  "Destructure Object": {
    "prefix": "dob",
    "body": ["const { $2 } = $1;"],
    "description": "Destructure object"
  },
  "Destructure Array": {
    "prefix": "dar",
    "body": ["const [$2] = $1;"],
    "description": "Destructure array"
  },

  "Set Timeout": {
    "prefix": "st",
    "body": ["setTimeout(() => {", "  $2", "}, ${1:1000});"],
    "description": "setTimeout"
  },
  "Set Interval": {
    "prefix": "si",
    "body": ["setInterval(() => {", "  $2", "}, ${1:1000});"],
    "description": "setInterval"
  },

  "React Component": {
    "prefix": "rfc",
    "body": [
      "export default function ${1:ComponentName}({ $2 }) {",
      "  return (",
      "    <div>",
      "      $3",
      "    </div>",
      "  );",
      "}"
    ],
    "description": "React functional component"
  },
  "React useState": {
    "prefix": "us",
    "body": ["const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:initial});"],
    "description": "useState hook"
  },
  "React useEffect": {
    "prefix": "ue",
    "body": ["useEffect(() => {", "  $1", "}, [$2]);"],
    "description": "useEffect hook"
  },
  "React useCallback": {
    "prefix": "ucb",
    "body": ["const ${1:callback} = useCallback(() => {", "  $2", "}, [$3]);"],
    "description": "useCallback hook"
  }
}
