return {}
-- return {
--   'hrsh7th/nvim-cmp',
--   event = 'InsertEnter',
--   dependencies = {
--     'hrsh7th/cmp-nvim-lsp',
--     'hrsh7th/cmp-buffer',
--     'hrsh7th/cmp-path',
--   },
--   opts = function()
--     vim.api.nvim_set_hl(0, 'CmpGhostText', { link = 'Comment', default = true })
--     local cmp = require 'cmp'
--     local defaults = require 'cmp.config.default'()
--     local auto_select = true
--
--     return {
--       auto_brackets = {}, -- configure any filetype to auto add brackets
--       completion = {
--         completeopt = 'menu,menuone,noinsert' .. (auto_select and '' or ',noselect'),
--       },
--       preselect = auto_select and cmp.PreselectMode.Item or cmp.PreselectMode.None,
--       mapping = cmp.mapping.preset.insert {
--         ['<C-b>'] = cmp.mapping.scroll_docs(-4),
--         ['<C-f>'] = cmp.mapping.scroll_docs(4),
--         ['<C-n>'] = cmp.mapping.select_next_item { behavior = cmp.SelectBehavior.Insert },
--         ['<C-p>'] = cmp.mapping.select_prev_item { behavior = cmp.SelectBehavior.Insert },
--         ['<C-Space>'] = cmp.mapping.complete(),
--         ['<CR>'] = cmp.mapping.confirm { select = auto_select },
--         ['<C-y>'] = cmp.mapping.confirm { select = true },
--         ['<S-CR>'] = cmp.mapping.confirm { behavior = cmp.ConfirmBehavior.Replace },
--         ['<C-CR>'] = function(fallback)
--           cmp.abort()
--           fallback()
--         end,
--       },
--       sources = cmp.config.sources({
--         { name = 'codeium' },
--         { name = 'nvim_lsp' },
--         { name = 'path' },
--       }, {
--         { name = 'buffer' },
--       }),
--       formatting = {
--         format = function(entry, item)
--           local icons = {
--             Text = '',
--             Method = 'ƒ',
--             Function = '',
--             Constructor = '',
--             Field = 'ﰠ',
--             Variable = '',
--             Class = '',
--             Interface = 'ﰮ',
--             Module = '',
--             Property = '',
--             Unit = '',
--             Value = '',
--             Enum = '了',
--             Keyword = '',
--             Snippet = '﬌',
--             Color = '',
--             File = '',
--             Reference = '',
--             Folder = '',
--             EnumMember = '',
--             Constant = '',
--             Struct = '',
--             Event = '',
--             Operator = 'ﬦ',
--             TypeParameter = '',
--           }
--           if icons[item.kind] then
--             item.kind = icons[item.kind] .. ' ' .. item.kind
--           end
--
--           local widths = {
--             abbr = 40,
--             menu = 30,
--           }
--
--           for key, width in pairs(widths) do
--             if item[key] and vim.fn.strdisplaywidth(item[key]) > width then
--               item[key] = vim.fn.strcharpart(item[key], 0, width - 1) .. '…'
--             end
--           end
--
--           return item
--         end,
--       },
--       experimental = {
--         ghost_text = {
--           hl_group = 'CmpGhostText',
--         },
--       },
--       sorting = defaults.sorting,
--     }
--   end,
-- }
